'use client'

import * as THREE from 'three'
import React, { Suspense, useRef, useEffect, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import LaptopScreen from './LaptopScreen/page'
import { Project } from '../ts/interfaces'
import { client } from '@/utils/sanity/client'

interface LaptopProps {
    postId: string | null;
}

function Model({ postId }: LaptopProps) {
    const [post, setPost] = useState<Project | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchPost = async () => {
          if (!postId) return;
    
          try {
            const postQuery = `*[_type == "project" && _id == "${postId}"][0]`;
            const fetchedPost = await client.fetch<Project>(postQuery);
            setPost(fetchedPost);
          } catch (err) {
            console.error('Failed to fetch post:', err);
            setError('Failed to fetch post');
          } finally {
            setLoading(false);
          }
        };
    
        fetchPost();
      }, [postId]);

    const group = useRef<THREE.Group>(null);
    // Load model
    const { nodes, materials } = useGLTF('/mac-draco.glb')
    // Make it float

    useFrame((state) => {
        if (!group.current) return;
        const t = state.clock.getElapsedTime()
        group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, Math.cos(t / 2) / 20 + 0.25, 0.1)
        group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, Math.sin(t / 4) / 20, 0.1)
        group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, Math.sin(t / 8) / 20, 0.1)
        group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-2 + Math.sin(t / 2)) / 2, 0.1)
    })


    if (loading || !post) {
        return null;
    }

    // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
    return (
        <group ref={group} dispose={null}>
            <group rotation-x={-0.425} position={[0, -1.04, 0.41]}>
            <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
                <mesh material={materials.aluminium} geometry={(nodes['Cube008'] as THREE.Mesh).geometry} />
                <mesh material={materials['matte.001']} geometry={(nodes['Cube008_1'] as THREE.Mesh).geometry} />
                <mesh geometry={(nodes['Cube008_2'] as THREE.Mesh).geometry}>
                {/* Drei's HTML component can "hide behind" canvas geometry */}
                <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
                    <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                    {/* <HeroPage /> */}
                    {/* <LaptopScreen post={post} /> */}
                    <LaptopScreen />
                    </div>
                </Html>
                </mesh>
            </group>
            </group>
            <mesh material={materials.keys} geometry={(nodes.keyboard as THREE.Mesh).geometry} position={[1.79, -1, 3.45]} />
            <group position={[0, -1.1, 3.39]}>
            <mesh material={materials.aluminium} geometry={(nodes['Cube002'] as THREE.Mesh).geometry} />
            <mesh material={materials.trackpad} geometry={(nodes['Cube002_1'] as THREE.Mesh).geometry} />
            </group>
            <mesh material={materials.touchbar} geometry={(nodes.touchbar as THREE.Mesh).geometry} position={[0, -1.03, 1.2]} />
        </group>
    )
    }

    export default function Laptop({ postId }: LaptopProps) {
    return (
    <Canvas camera={{ position: [-15, 0, -15], fov: 40 }}>
        <pointLight position={[10, 10, 10]} intensity={2.5} />
        <Suspense fallback={null}>
        <group rotation={[0, Math.PI, 0]} position={[0, 1, 0]}>
            <Model postId={postId} />
        </group>
        <Environment preset="city" />
        </Suspense>
        {/* <ContactShadows position={[0, -4.5, 0]} scale={30} blur={4} far={4.5} /> */}
        <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2.2} maxPolarAngle={Math.PI / 2.2} />
    </Canvas>
    )
}
